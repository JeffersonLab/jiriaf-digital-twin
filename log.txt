[INFO] [launch]: All log files can be found below /root/.ros/log/2024-04-19-13-37-29-140627-9f8e7a2a25a2-40679
[INFO] [launch]: Default logging verbosity is set to INFO
[INFO] [asset.py-1]: process started with pid [40694]
[INFO] [twin.py-2]: process started with pid [40695]
[INFO] [rqt_gui-3]: process started with pid [40696]
[INFO] [logger.py-4]: process started with pid [40697]
[rqt_gui-3] [36mQStandardPaths: XDG_RUNTIME_DIR not set, defaulting to '/tmp/runtime-root'[0m
[rqt_gui-3] No handles with labels found to put in legend.
[rqt_gui-3] No handles with labels found to put in legend.
[rqt_gui-3] No handles with labels found to put in legend.
[rqt_gui-3] No handles with labels found to put in legend.
[twin.py-2] Found a policy!
[twin.py-2] State (0, 0) is assigned control 3g
[twin.py-2] State (0, 20) is assigned control 3g
[twin.py-2] State (0, 40) is assigned control 3g
[twin.py-2] State (0, 60) is assigned control 3g
[twin.py-2] State (0, 80) is assigned control 3g
[twin.py-2] State (20, 0) is assigned control 3g
[twin.py-2] State (20, 20) is assigned control 3g
[twin.py-2] State (20, 40) is assigned control 3g
[twin.py-2] State (20, 60) is assigned control 3g
[twin.py-2] State (20, 80) is assigned control 3g
[twin.py-2] State (40, 0) is assigned control 3g
[twin.py-2] State (40, 20) is assigned control 3g
[twin.py-2] State (40, 40) is assigned control 3g
[twin.py-2] State (40, 60) is assigned control 3g
[twin.py-2] State (40, 80) is assigned control 3g
[twin.py-2] State (60, 0) is assigned control 3g
[twin.py-2] State (60, 20) is assigned control 3g
[twin.py-2] State (60, 40) is assigned control 3g
[twin.py-2] State (60, 60) is assigned control 3g
[twin.py-2] State (60, 80) is assigned control 3g
[twin.py-2] State (80, 0) is assigned control 3g
[twin.py-2] State (80, 20) is assigned control 3g
[twin.py-2] State (80, 40) is assigned control 3g
[twin.py-2] State (80, 60) is assigned control 3g
[twin.py-2] State (80, 80) is assigned control 3g
[twin.py-2] =============  -1  =========== Initializing the digital twin
[twin.py-2] =============  -1  =========== Before, States: 0
[twin.py-2] len(self.variables['states']) = 0 t = 0
[twin.py-2] var_state_name = []
[twin.py-2] 000000000000000000000
[twin.py-2] =============  0  =========== After processing new state, States: 3
[twin.py-2] state_names ================ 
[twin.py-2]  ['Damage 0', 'Ref. Observation 0', 'ControlP 0']
[twin.py-2] process_and_publish_control === 0 === Predicting next 10 timesteps
[twin.py-2] after choose_action === 0 === states: 3
[twin.py-2] after process_new_control === 0 === states: 4
[twin.py-2] gm.prepare_prediction ============= t: 1
[twin.py-2] len(self.variables['states']) = 1 t = 1
[twin.py-2] var_state_name = ['Damage 0']
[twin.py-2] 888888888888888888888
[twin.py-2] gm.prepare_prediction ============= t: 2
[twin.py-2] len(self.variables['states']) = 2 t = 2
[twin.py-2] var_state_name = ['Damage 0', 'Damage 1']
[twin.py-2] 888888888888888888888
[twin.py-2] gm.prepare_prediction ============= t: 3
[twin.py-2] len(self.variables['states']) = 3 t = 3
[twin.py-2] var_state_name = ['Damage 0', 'Damage 1', 'Damage 2']
[twin.py-2] 888888888888888888888
[twin.py-2] gm.prepare_prediction ============= t: 4
[twin.py-2] len(self.variables['states']) = 4 t = 4
[twin.py-2] var_state_name = ['Damage 0', 'Damage 1', 'Damage 2', 'Damage 3']
[twin.py-2] 888888888888888888888
[twin.py-2] gm.prepare_prediction ============= t: 5
[twin.py-2] len(self.variables['states']) = 5 t = 5
[twin.py-2] var_state_name = ['Damage 0', 'Damage 1', 'Damage 2', 'Damage 3', 'Damage 4']
[twin.py-2] 888888888888888888888
[twin.py-2] gm.prepare_prediction ============= t: 6
[twin.py-2] len(self.variables['states']) = 6 t = 6
[twin.py-2] var_state_name = ['Damage 0', 'Damage 1', 'Damage 2', 'Damage 3', 'Damage 4', 'Damage 5']
[twin.py-2] 888888888888888888888
[twin.py-2] gm.prepare_prediction ============= t: 7
[twin.py-2] len(self.variables['states']) = 7 t = 7
[twin.py-2] var_state_name = ['Damage 0', 'Damage 1', 'Damage 2', 'Damage 3', 'Damage 4', 'Damage 5', 'Damage 6']
[twin.py-2] 888888888888888888888
[twin.py-2] gm.prepare_prediction ============= t: 8
[twin.py-2] len(self.variables['states']) = 8 t = 8
[twin.py-2] var_state_name = ['Damage 0', 'Damage 1', 'Damage 2', 'Damage 3', 'Damage 4', 'Damage 5', 'Damage 6', 'Damage 7']
[twin.py-2] 888888888888888888888
[twin.py-2] gm.prepare_prediction ============= t: 9
[twin.py-2] len(self.variables['states']) = 9 t = 9
[twin.py-2] var_state_name = ['Damage 0', 'Damage 1', 'Damage 2', 'Damage 3', 'Damage 4', 'Damage 5', 'Damage 6', 'Damage 7', 'Damage 8']
[twin.py-2] 888888888888888888888
[twin.py-2] gm.prepare_prediction ============= t: 10
[twin.py-2] len(self.variables['states']) = 10 t = 10
[twin.py-2] var_state_name = ['Damage 0', 'Damage 1', 'Damage 2', 'Damage 3', 'Damage 4', 'Damage 5', 'Damage 6', 'Damage 7', 'Damage 8', 'Damage 9']
[twin.py-2] 888888888888888888888
[twin.py-2] after prepare_prediction === 0 === states: 34
[twin.py-2] [0m[INFO] [uav_twin]: Twin published control data for timestep 0 : [1][0m
[rqt_gui-3] [31mPluginHandlerDirect._shutdown_plugin() plugin "rqt_network/Network Viewer#1" raised an exception:
[rqt_gui-3] Traceback (most recent call last):
[rqt_gui-3]   File "/opt/ros/eloquent/lib/python3.6/site-packages/qt_gui/plugin_handler_direct.py", line 87, in _shutdown_plugin
[rqt_gui-3]     self._plugin.shutdown_plugin()
[rqt_gui-3]   File "/root/digitaltwin_ws/install/rqt_network/lib/python3.6/site-packages/rqt_network/ROSnetwork.py", line 41, in shutdown_plugin
[rqt_gui-3]     self._widget.shutdown_plugin()
[rqt_gui-3]   File "/root/digitaltwin_ws/install/rqt_network/lib/python3.6/site-packages/rqt_network/ROSnetwork.py", line 144, in shutdown_plugin
[rqt_gui-3]     self.graph.draw(self.log_fpath + 'graph.png', format='png')
[rqt_gui-3] AttributeError: 'Network' object has no attribute 'graph'
[rqt_gui-3] [0m
[INFO] [rqt_gui-3]: process has finished cleanly [pid 40696]
[asset.py-1] cleanmeasurement: [3618.2722749999998, 4614.3126750000001, 18982.536066666667, 10155.789815666667, 9855.8095069999999, 28990.549081000001, 116959.06432733334, 68488.459694666657, 135116.87609766665, 24277.737315000002, 222518.91410766667, 31263.677858999999, 107561.579004, 56201.877142666664, 26436.143495333334, 29759.247686333332, 24323.798404333331, 23929.169657666669, 27543.656696000002, 27164.316953333331, 232288.03716599999, 27455.179419666663, 414078.6749483333, 26920.799009333336]
[asset.py-1] noisymeasurement: [3668.9348344825189, 4643.9910927740957, 18974.796626992113, 10103.807686543745, 9813.9968977317185, 28969.361444053662, 117006.94680099156, 68565.778763254551, 135059.80345928521, 24245.518396320855, 222504.71067139917, 31210.985936923938, 107510.29956593143, 56194.754597348445, 26449.988755033657, 29751.425381676239, 24286.293290014844, 23948.030452401017, 27566.807778837039, 27157.524682296524, 232306.93987858648, 27507.823675531141, 414113.85515820881, 26890.789904517576]
[twin.py-2] gm.process_new_observation ============= master_timestep: 0
[twin.py-2] /root/digitaltwin_ws/install/digitaltwin/lib/python3.6/site-packages/digitaltwin/graphicalmodel.py:323: RuntimeWarning: divide by zero encountered in log
[twin.py-2]   prob[idx] += np.log(norm.pdf(m[sensIdx], cleanObservation[sensIdx], self.sigma/np.sqrt(scalefactor))) # ev
[asset.py-1] [0m[INFO] [uav_asset]: Asset published sensor data for timestep -1 : [   3668.93483448    4643.99109277   18974.79662699   10103.80768654
[asset.py-1]     9813.99689773   28969.36144405  117006.94680099   68565.77876325
[asset.py-1]   135059.80345929   24245.51839632  222504.7106714    31210.98593692
[asset.py-1]   107510.29956593   56194.75459735   26449.98875503   29751.42538168
[asset.py-1]    24286.29329001   23948.0304524    27566.80777884   27157.5246823
[asset.py-1]   232306.93987859   27507.82367553  414113.85515821   26890.78990452][0m
[asset.py-1] publish_state_data >>>>>> -1 >>>>>>
[twin.py-2] =============  0  =========== Before, States: 35
[twin.py-2] len(self.variables['states']) = 11 t = 1
[twin.py-2] var_state_name = ['Damage 0', 'Damage 1', 'Damage 2', 'Damage 3', 'Damage 4', 'Damage 5', 'Damage 6', 'Damage 7', 'Damage 8', 'Damage 9', 'Damage 10']
[twin.py-2] =============  1  =========== After processing new state, States: 35
[twin.py-2] state_names ================ 
[twin.py-2]  ['Damage 0', 'Ref. Observation 0', 'ControlP 0', 'ControlA 0', 'Damage 1', 'ControlP 1', 'Ref. Observation 1', 'Damage 2', 'ControlP 2', 'Ref. Observation 2', 'Damage 3', 'ControlP 3', 'Ref. Observation 3', 'Damage 4', 'ControlP 4', 'Ref. Observation 4', 'Damage 5', 'ControlP 5', 'Ref. Observation 5', 'Damage 6', 'ControlP 6', 'Ref. Observation 6', 'Damage 7', 'ControlP 7', 'Ref. Observation 7', 'Damage 8', 'ControlP 8', 'Ref. Observation 8', 'Damage 9', 'ControlP 9', 'Ref. Observation 9', 'Damage 10', 'ControlP 10', 'Ref. Observation 10', 'Observation 0']
[twin.py-2] Traceback (most recent call last):
[twin.py-2]   File "/root/digitaltwin_ws/install/digitaltwin/lib/digitaltwin/twin.py", line 270, in <module>
[twin.py-2]     main()
[twin.py-2]   File "/root/digitaltwin_ws/install/digitaltwin/lib/digitaltwin/twin.py", line 255, in main
[twin.py-2]     rclpy.spin(uav_twin)
[twin.py-2]   File "/opt/ros/eloquent/lib/python3.6/site-packages/rclpy/__init__.py", line 190, in spin
[twin.py-2]     executor.spin_once()
[twin.py-2]   File "/opt/ros/eloquent/lib/python3.6/site-packages/rclpy/executors.py", line 684, in spin_once
[twin.py-2]     raise handler.exception()
[twin.py-2]   File "/opt/ros/eloquent/lib/python3.6/site-packages/rclpy/task.py", line 239, in __call__
[twin.py-2]     self._handler.send(None)
[twin.py-2]   File "/opt/ros/eloquent/lib/python3.6/site-packages/rclpy/executors.py", line 404, in handler
[twin.py-2]     await call_coroutine(entity, arg)
[twin.py-2]   File "/opt/ros/eloquent/lib/python3.6/site-packages/rclpy/executors.py", line 330, in _execute_subscription
[twin.py-2]     await await_or_execute(sub.callback, msg)
[twin.py-2]   File "/opt/ros/eloquent/lib/python3.6/site-packages/rclpy/executors.py", line 118, in await_or_execute
[twin.py-2]     return callback(*args)
[twin.py-2]   File "/root/digitaltwin_ws/install/digitaltwin/lib/digitaltwin/twin.py", line 102, in sensor_callback
[twin.py-2]     self.publish_sensor_ref()
[twin.py-2]   File "/root/digitaltwin_ws/install/digitaltwin/lib/digitaltwin/twin.py", line 178, in publish_sensor_ref
[twin.py-2]     ref_obs_var -= np.power(ref_obs,2)
[twin.py-2] TypeError: unsupported operand type(s) for ** or pow(): 'NoneType' and 'int'
[ERROR] [twin.py-2]: process has died [pid 40695, exit code 1, cmd '/root/digitaltwin_ws/install/digitaltwin/lib/digitaltwin/twin.py --ros-args -r __node:=uav_twin'].
[WARNING] [launch]: user interrupted with ctrl-c (SIGINT)
[logger.py-4] [0m[INFO] [uav_logger]: Shutdown detected...Logger saving data.[0m
[INFO] [asset.py-1]: process has finished cleanly [pid 40694]
[INFO] [logger.py-4]: process has finished cleanly [pid 40697]
